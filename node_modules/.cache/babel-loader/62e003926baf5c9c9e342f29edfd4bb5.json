{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Edgar\\\\OneDrive\\\\Desktop\\\\es6-arrow-functions\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./components/App\"; // ReactDOM.render(<App />, document.getElementById(\"root\"));//no longer supported in React 18.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 13\n}, this)); // const newNumbers = numbers.map(x => x * x);\n\nvar numbers = [3, 56, 2, 48, 5]; ////Map -Create a new array by doing something with each item in an array.\n\nvar newNumbers = numbers.map(function (x) {\n  return x * 2;\n}); //////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })","map":{"version":3,"names":["React","ReactDOM","App","root","createRoot","document","getElementById","render","numbers","newNumbers","map","x"],"sources":["C:/Users/Edgar/OneDrive/Desktop/es6-arrow-functions/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./components/App\";\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));//no longer supported in React 18.\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n\n\n// const newNumbers = numbers.map(x => x * x);\n\n\nvar numbers = [3, 56, 2, 48, 5];\n\n////Map -Create a new array by doing something with each item in an array.\nconst newNumbers = numbers.map(x => x * 2);\n\n//////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB,C,CAEA;;;AAEA,IAAMC,IAAI,GAAGF,QAAQ,CAACG,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eAAY,QAAC,GAAD;EAAA;EAAA;EAAA;AAAA,QAAZ,E,CAGA;;AAGA,IAAIC,OAAO,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,CAAf,CAAd,C,CAEA;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAACE,GAAR,CAAY,UAAAC,CAAC;EAAA,OAAIA,CAAC,GAAG,CAAR;AAAA,CAAb,CAAnB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}